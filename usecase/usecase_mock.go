// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package usecase

import (
	"context"
	"github.com/egnptr/dating-app/model"
	"sync"
)

// Ensure, that UsecasesMock does implement Usecases.
// If this is not the case, regenerate this file with moq.
var _ Usecases = &UsecasesMock{}

// UsecasesMock is a mock implementation of Usecases.
//
//	func TestSomethingThatUsesUsecases(t *testing.T) {
//
//		// make and configure a mocked Usecases
//		mockedUsecases := &UsecasesMock{
//			CreateUserFunc: func(ctx context.Context, req model.User) error {
//				panic("mock out the CreateUser method")
//			},
//			GetProfilesFunc: func(ctx context.Context, req model.GetRelatedUserRequest) ([]model.User, error) {
//				panic("mock out the GetProfiles method")
//			},
//			LoginFunc: func(ctx context.Context, req model.LoginRequest) error {
//				panic("mock out the Login method")
//			},
//			SwipeFunc: func(ctx context.Context, req model.SwipeRequest) error {
//				panic("mock out the Swipe method")
//			},
//			UpdateSubscriptionFunc: func(ctx context.Context, req model.SubscribeRequest) error {
//				panic("mock out the UpdateSubscription method")
//			},
//		}
//
//		// use mockedUsecases in code that requires Usecases
//		// and then make assertions.
//
//	}
type UsecasesMock struct {
	// CreateUserFunc mocks the CreateUser method.
	CreateUserFunc func(ctx context.Context, req model.User) error

	// GetProfilesFunc mocks the GetProfiles method.
	GetProfilesFunc func(ctx context.Context, req model.GetRelatedUserRequest) ([]model.User, error)

	// LoginFunc mocks the Login method.
	LoginFunc func(ctx context.Context, req model.LoginRequest) error

	// SwipeFunc mocks the Swipe method.
	SwipeFunc func(ctx context.Context, req model.SwipeRequest) error

	// UpdateSubscriptionFunc mocks the UpdateSubscription method.
	UpdateSubscriptionFunc func(ctx context.Context, req model.SubscribeRequest) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateUser holds details about calls to the CreateUser method.
		CreateUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req model.User
		}
		// GetProfiles holds details about calls to the GetProfiles method.
		GetProfiles []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req model.GetRelatedUserRequest
		}
		// Login holds details about calls to the Login method.
		Login []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req model.LoginRequest
		}
		// Swipe holds details about calls to the Swipe method.
		Swipe []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req model.SwipeRequest
		}
		// UpdateSubscription holds details about calls to the UpdateSubscription method.
		UpdateSubscription []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req model.SubscribeRequest
		}
	}
	lockCreateUser         sync.RWMutex
	lockGetProfiles        sync.RWMutex
	lockLogin              sync.RWMutex
	lockSwipe              sync.RWMutex
	lockUpdateSubscription sync.RWMutex
}

// CreateUser calls CreateUserFunc.
func (mock *UsecasesMock) CreateUser(ctx context.Context, req model.User) error {
	if mock.CreateUserFunc == nil {
		panic("UsecasesMock.CreateUserFunc: method is nil but Usecases.CreateUser was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req model.User
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockCreateUser.Lock()
	mock.calls.CreateUser = append(mock.calls.CreateUser, callInfo)
	mock.lockCreateUser.Unlock()
	return mock.CreateUserFunc(ctx, req)
}

// CreateUserCalls gets all the calls that were made to CreateUser.
// Check the length with:
//
//	len(mockedUsecases.CreateUserCalls())
func (mock *UsecasesMock) CreateUserCalls() []struct {
	Ctx context.Context
	Req model.User
} {
	var calls []struct {
		Ctx context.Context
		Req model.User
	}
	mock.lockCreateUser.RLock()
	calls = mock.calls.CreateUser
	mock.lockCreateUser.RUnlock()
	return calls
}

// GetProfiles calls GetProfilesFunc.
func (mock *UsecasesMock) GetProfiles(ctx context.Context, req model.GetRelatedUserRequest) ([]model.User, error) {
	if mock.GetProfilesFunc == nil {
		panic("UsecasesMock.GetProfilesFunc: method is nil but Usecases.GetProfiles was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req model.GetRelatedUserRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockGetProfiles.Lock()
	mock.calls.GetProfiles = append(mock.calls.GetProfiles, callInfo)
	mock.lockGetProfiles.Unlock()
	return mock.GetProfilesFunc(ctx, req)
}

// GetProfilesCalls gets all the calls that were made to GetProfiles.
// Check the length with:
//
//	len(mockedUsecases.GetProfilesCalls())
func (mock *UsecasesMock) GetProfilesCalls() []struct {
	Ctx context.Context
	Req model.GetRelatedUserRequest
} {
	var calls []struct {
		Ctx context.Context
		Req model.GetRelatedUserRequest
	}
	mock.lockGetProfiles.RLock()
	calls = mock.calls.GetProfiles
	mock.lockGetProfiles.RUnlock()
	return calls
}

// Login calls LoginFunc.
func (mock *UsecasesMock) Login(ctx context.Context, req model.LoginRequest) error {
	if mock.LoginFunc == nil {
		panic("UsecasesMock.LoginFunc: method is nil but Usecases.Login was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req model.LoginRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockLogin.Lock()
	mock.calls.Login = append(mock.calls.Login, callInfo)
	mock.lockLogin.Unlock()
	return mock.LoginFunc(ctx, req)
}

// LoginCalls gets all the calls that were made to Login.
// Check the length with:
//
//	len(mockedUsecases.LoginCalls())
func (mock *UsecasesMock) LoginCalls() []struct {
	Ctx context.Context
	Req model.LoginRequest
} {
	var calls []struct {
		Ctx context.Context
		Req model.LoginRequest
	}
	mock.lockLogin.RLock()
	calls = mock.calls.Login
	mock.lockLogin.RUnlock()
	return calls
}

// Swipe calls SwipeFunc.
func (mock *UsecasesMock) Swipe(ctx context.Context, req model.SwipeRequest) error {
	if mock.SwipeFunc == nil {
		panic("UsecasesMock.SwipeFunc: method is nil but Usecases.Swipe was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req model.SwipeRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockSwipe.Lock()
	mock.calls.Swipe = append(mock.calls.Swipe, callInfo)
	mock.lockSwipe.Unlock()
	return mock.SwipeFunc(ctx, req)
}

// SwipeCalls gets all the calls that were made to Swipe.
// Check the length with:
//
//	len(mockedUsecases.SwipeCalls())
func (mock *UsecasesMock) SwipeCalls() []struct {
	Ctx context.Context
	Req model.SwipeRequest
} {
	var calls []struct {
		Ctx context.Context
		Req model.SwipeRequest
	}
	mock.lockSwipe.RLock()
	calls = mock.calls.Swipe
	mock.lockSwipe.RUnlock()
	return calls
}

// UpdateSubscription calls UpdateSubscriptionFunc.
func (mock *UsecasesMock) UpdateSubscription(ctx context.Context, req model.SubscribeRequest) error {
	if mock.UpdateSubscriptionFunc == nil {
		panic("UsecasesMock.UpdateSubscriptionFunc: method is nil but Usecases.UpdateSubscription was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req model.SubscribeRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockUpdateSubscription.Lock()
	mock.calls.UpdateSubscription = append(mock.calls.UpdateSubscription, callInfo)
	mock.lockUpdateSubscription.Unlock()
	return mock.UpdateSubscriptionFunc(ctx, req)
}

// UpdateSubscriptionCalls gets all the calls that were made to UpdateSubscription.
// Check the length with:
//
//	len(mockedUsecases.UpdateSubscriptionCalls())
func (mock *UsecasesMock) UpdateSubscriptionCalls() []struct {
	Ctx context.Context
	Req model.SubscribeRequest
} {
	var calls []struct {
		Ctx context.Context
		Req model.SubscribeRequest
	}
	mock.lockUpdateSubscription.RLock()
	calls = mock.calls.UpdateSubscription
	mock.lockUpdateSubscription.RUnlock()
	return calls
}
