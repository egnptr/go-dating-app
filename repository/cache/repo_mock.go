// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package cache

import (
	"context"
	"github.com/egnptr/dating-app/model"
	"sync"
)

// Ensure, that RepoMock does implement Repo.
// If this is not the case, regenerate this file with moq.
var _ Repo = &RepoMock{}

// RepoMock is a mock implementation of Repo.
//
//	func TestSomethingThatUsesRepo(t *testing.T) {
//
//		// make and configure a mocked Repo
//		mockedRepo := &RepoMock{
//			GetRelatedUserCacheFunc: func(ctx context.Context, userID int64) (map[int64]int, error) {
//				panic("mock out the GetRelatedUserCache method")
//			},
//			GetRelatedUserCacheLenFunc: func(ctx context.Context, userID int64) (int64, error) {
//				panic("mock out the GetRelatedUserCacheLen method")
//			},
//			SetRelatedUserCacheFunc: func(ctx context.Context, userID int64, data model.UserRelation) error {
//				panic("mock out the SetRelatedUserCache method")
//			},
//		}
//
//		// use mockedRepo in code that requires Repo
//		// and then make assertions.
//
//	}
type RepoMock struct {
	// GetRelatedUserCacheFunc mocks the GetRelatedUserCache method.
	GetRelatedUserCacheFunc func(ctx context.Context, userID int64) (map[int64]int, error)

	// GetRelatedUserCacheLenFunc mocks the GetRelatedUserCacheLen method.
	GetRelatedUserCacheLenFunc func(ctx context.Context, userID int64) (int64, error)

	// SetRelatedUserCacheFunc mocks the SetRelatedUserCache method.
	SetRelatedUserCacheFunc func(ctx context.Context, userID int64, data model.UserRelation) error

	// calls tracks calls to the methods.
	calls struct {
		// GetRelatedUserCache holds details about calls to the GetRelatedUserCache method.
		GetRelatedUserCache []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserID is the userID argument value.
			UserID int64
		}
		// GetRelatedUserCacheLen holds details about calls to the GetRelatedUserCacheLen method.
		GetRelatedUserCacheLen []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserID is the userID argument value.
			UserID int64
		}
		// SetRelatedUserCache holds details about calls to the SetRelatedUserCache method.
		SetRelatedUserCache []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserID is the userID argument value.
			UserID int64
			// Data is the data argument value.
			Data model.UserRelation
		}
	}
	lockGetRelatedUserCache    sync.RWMutex
	lockGetRelatedUserCacheLen sync.RWMutex
	lockSetRelatedUserCache    sync.RWMutex
}

// GetRelatedUserCache calls GetRelatedUserCacheFunc.
func (mock *RepoMock) GetRelatedUserCache(ctx context.Context, userID int64) (map[int64]int, error) {
	if mock.GetRelatedUserCacheFunc == nil {
		panic("RepoMock.GetRelatedUserCacheFunc: method is nil but Repo.GetRelatedUserCache was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		UserID int64
	}{
		Ctx:    ctx,
		UserID: userID,
	}
	mock.lockGetRelatedUserCache.Lock()
	mock.calls.GetRelatedUserCache = append(mock.calls.GetRelatedUserCache, callInfo)
	mock.lockGetRelatedUserCache.Unlock()
	return mock.GetRelatedUserCacheFunc(ctx, userID)
}

// GetRelatedUserCacheCalls gets all the calls that were made to GetRelatedUserCache.
// Check the length with:
//
//	len(mockedRepo.GetRelatedUserCacheCalls())
func (mock *RepoMock) GetRelatedUserCacheCalls() []struct {
	Ctx    context.Context
	UserID int64
} {
	var calls []struct {
		Ctx    context.Context
		UserID int64
	}
	mock.lockGetRelatedUserCache.RLock()
	calls = mock.calls.GetRelatedUserCache
	mock.lockGetRelatedUserCache.RUnlock()
	return calls
}

// GetRelatedUserCacheLen calls GetRelatedUserCacheLenFunc.
func (mock *RepoMock) GetRelatedUserCacheLen(ctx context.Context, userID int64) (int64, error) {
	if mock.GetRelatedUserCacheLenFunc == nil {
		panic("RepoMock.GetRelatedUserCacheLenFunc: method is nil but Repo.GetRelatedUserCacheLen was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		UserID int64
	}{
		Ctx:    ctx,
		UserID: userID,
	}
	mock.lockGetRelatedUserCacheLen.Lock()
	mock.calls.GetRelatedUserCacheLen = append(mock.calls.GetRelatedUserCacheLen, callInfo)
	mock.lockGetRelatedUserCacheLen.Unlock()
	return mock.GetRelatedUserCacheLenFunc(ctx, userID)
}

// GetRelatedUserCacheLenCalls gets all the calls that were made to GetRelatedUserCacheLen.
// Check the length with:
//
//	len(mockedRepo.GetRelatedUserCacheLenCalls())
func (mock *RepoMock) GetRelatedUserCacheLenCalls() []struct {
	Ctx    context.Context
	UserID int64
} {
	var calls []struct {
		Ctx    context.Context
		UserID int64
	}
	mock.lockGetRelatedUserCacheLen.RLock()
	calls = mock.calls.GetRelatedUserCacheLen
	mock.lockGetRelatedUserCacheLen.RUnlock()
	return calls
}

// SetRelatedUserCache calls SetRelatedUserCacheFunc.
func (mock *RepoMock) SetRelatedUserCache(ctx context.Context, userID int64, data model.UserRelation) error {
	if mock.SetRelatedUserCacheFunc == nil {
		panic("RepoMock.SetRelatedUserCacheFunc: method is nil but Repo.SetRelatedUserCache was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		UserID int64
		Data   model.UserRelation
	}{
		Ctx:    ctx,
		UserID: userID,
		Data:   data,
	}
	mock.lockSetRelatedUserCache.Lock()
	mock.calls.SetRelatedUserCache = append(mock.calls.SetRelatedUserCache, callInfo)
	mock.lockSetRelatedUserCache.Unlock()
	return mock.SetRelatedUserCacheFunc(ctx, userID, data)
}

// SetRelatedUserCacheCalls gets all the calls that were made to SetRelatedUserCache.
// Check the length with:
//
//	len(mockedRepo.SetRelatedUserCacheCalls())
func (mock *RepoMock) SetRelatedUserCacheCalls() []struct {
	Ctx    context.Context
	UserID int64
	Data   model.UserRelation
} {
	var calls []struct {
		Ctx    context.Context
		UserID int64
		Data   model.UserRelation
	}
	mock.lockSetRelatedUserCache.RLock()
	calls = mock.calls.SetRelatedUserCache
	mock.lockSetRelatedUserCache.RUnlock()
	return calls
}
