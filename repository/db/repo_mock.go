// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package db

import (
	"context"
	"github.com/egnptr/dating-app/model"
	"sync"
)

// Ensure, that RepoMock does implement Repo.
// If this is not the case, regenerate this file with moq.
var _ Repo = &RepoMock{}

// RepoMock is a mock implementation of Repo.
//
//	func TestSomethingThatUsesRepo(t *testing.T) {
//
//		// make and configure a mocked Repo
//		mockedRepo := &RepoMock{
//			CreateUserFunc: func(ctx context.Context, req model.User) error {
//				panic("mock out the CreateUser method")
//			},
//			GetRelatedUserFunc: func(ctx context.Context, id int64) ([]model.User, error) {
//				panic("mock out the GetRelatedUser method")
//			},
//			GetUserFunc: func(ctx context.Context, username string) (*model.User, error) {
//				panic("mock out the GetUser method")
//			},
//			GetUserByIDFunc: func(ctx context.Context, userID int64) (*model.User, error) {
//				panic("mock out the GetUserByID method")
//			},
//			UpdatePremiumStatusFunc: func(ctx context.Context, req model.SubscribeRequest) error {
//				panic("mock out the UpdatePremiumStatus method")
//			},
//		}
//
//		// use mockedRepo in code that requires Repo
//		// and then make assertions.
//
//	}
type RepoMock struct {
	// CreateUserFunc mocks the CreateUser method.
	CreateUserFunc func(ctx context.Context, req model.User) error

	// GetRelatedUserFunc mocks the GetRelatedUser method.
	GetRelatedUserFunc func(ctx context.Context, id int64) ([]model.User, error)

	// GetUserFunc mocks the GetUser method.
	GetUserFunc func(ctx context.Context, username string) (*model.User, error)

	// GetUserByIDFunc mocks the GetUserByID method.
	GetUserByIDFunc func(ctx context.Context, userID int64) (*model.User, error)

	// UpdatePremiumStatusFunc mocks the UpdatePremiumStatus method.
	UpdatePremiumStatusFunc func(ctx context.Context, req model.SubscribeRequest) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateUser holds details about calls to the CreateUser method.
		CreateUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req model.User
		}
		// GetRelatedUser holds details about calls to the GetRelatedUser method.
		GetRelatedUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
		// GetUser holds details about calls to the GetUser method.
		GetUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Username is the username argument value.
			Username string
		}
		// GetUserByID holds details about calls to the GetUserByID method.
		GetUserByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserID is the userID argument value.
			UserID int64
		}
		// UpdatePremiumStatus holds details about calls to the UpdatePremiumStatus method.
		UpdatePremiumStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req model.SubscribeRequest
		}
	}
	lockCreateUser          sync.RWMutex
	lockGetRelatedUser      sync.RWMutex
	lockGetUser             sync.RWMutex
	lockGetUserByID         sync.RWMutex
	lockUpdatePremiumStatus sync.RWMutex
}

// CreateUser calls CreateUserFunc.
func (mock *RepoMock) CreateUser(ctx context.Context, req model.User) error {
	if mock.CreateUserFunc == nil {
		panic("RepoMock.CreateUserFunc: method is nil but Repo.CreateUser was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req model.User
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockCreateUser.Lock()
	mock.calls.CreateUser = append(mock.calls.CreateUser, callInfo)
	mock.lockCreateUser.Unlock()
	return mock.CreateUserFunc(ctx, req)
}

// CreateUserCalls gets all the calls that were made to CreateUser.
// Check the length with:
//
//	len(mockedRepo.CreateUserCalls())
func (mock *RepoMock) CreateUserCalls() []struct {
	Ctx context.Context
	Req model.User
} {
	var calls []struct {
		Ctx context.Context
		Req model.User
	}
	mock.lockCreateUser.RLock()
	calls = mock.calls.CreateUser
	mock.lockCreateUser.RUnlock()
	return calls
}

// GetRelatedUser calls GetRelatedUserFunc.
func (mock *RepoMock) GetRelatedUser(ctx context.Context, id int64) ([]model.User, error) {
	if mock.GetRelatedUserFunc == nil {
		panic("RepoMock.GetRelatedUserFunc: method is nil but Repo.GetRelatedUser was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetRelatedUser.Lock()
	mock.calls.GetRelatedUser = append(mock.calls.GetRelatedUser, callInfo)
	mock.lockGetRelatedUser.Unlock()
	return mock.GetRelatedUserFunc(ctx, id)
}

// GetRelatedUserCalls gets all the calls that were made to GetRelatedUser.
// Check the length with:
//
//	len(mockedRepo.GetRelatedUserCalls())
func (mock *RepoMock) GetRelatedUserCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	mock.lockGetRelatedUser.RLock()
	calls = mock.calls.GetRelatedUser
	mock.lockGetRelatedUser.RUnlock()
	return calls
}

// GetUser calls GetUserFunc.
func (mock *RepoMock) GetUser(ctx context.Context, username string) (*model.User, error) {
	if mock.GetUserFunc == nil {
		panic("RepoMock.GetUserFunc: method is nil but Repo.GetUser was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Username string
	}{
		Ctx:      ctx,
		Username: username,
	}
	mock.lockGetUser.Lock()
	mock.calls.GetUser = append(mock.calls.GetUser, callInfo)
	mock.lockGetUser.Unlock()
	return mock.GetUserFunc(ctx, username)
}

// GetUserCalls gets all the calls that were made to GetUser.
// Check the length with:
//
//	len(mockedRepo.GetUserCalls())
func (mock *RepoMock) GetUserCalls() []struct {
	Ctx      context.Context
	Username string
} {
	var calls []struct {
		Ctx      context.Context
		Username string
	}
	mock.lockGetUser.RLock()
	calls = mock.calls.GetUser
	mock.lockGetUser.RUnlock()
	return calls
}

// GetUserByID calls GetUserByIDFunc.
func (mock *RepoMock) GetUserByID(ctx context.Context, userID int64) (*model.User, error) {
	if mock.GetUserByIDFunc == nil {
		panic("RepoMock.GetUserByIDFunc: method is nil but Repo.GetUserByID was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		UserID int64
	}{
		Ctx:    ctx,
		UserID: userID,
	}
	mock.lockGetUserByID.Lock()
	mock.calls.GetUserByID = append(mock.calls.GetUserByID, callInfo)
	mock.lockGetUserByID.Unlock()
	return mock.GetUserByIDFunc(ctx, userID)
}

// GetUserByIDCalls gets all the calls that were made to GetUserByID.
// Check the length with:
//
//	len(mockedRepo.GetUserByIDCalls())
func (mock *RepoMock) GetUserByIDCalls() []struct {
	Ctx    context.Context
	UserID int64
} {
	var calls []struct {
		Ctx    context.Context
		UserID int64
	}
	mock.lockGetUserByID.RLock()
	calls = mock.calls.GetUserByID
	mock.lockGetUserByID.RUnlock()
	return calls
}

// UpdatePremiumStatus calls UpdatePremiumStatusFunc.
func (mock *RepoMock) UpdatePremiumStatus(ctx context.Context, req model.SubscribeRequest) error {
	if mock.UpdatePremiumStatusFunc == nil {
		panic("RepoMock.UpdatePremiumStatusFunc: method is nil but Repo.UpdatePremiumStatus was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req model.SubscribeRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockUpdatePremiumStatus.Lock()
	mock.calls.UpdatePremiumStatus = append(mock.calls.UpdatePremiumStatus, callInfo)
	mock.lockUpdatePremiumStatus.Unlock()
	return mock.UpdatePremiumStatusFunc(ctx, req)
}

// UpdatePremiumStatusCalls gets all the calls that were made to UpdatePremiumStatus.
// Check the length with:
//
//	len(mockedRepo.UpdatePremiumStatusCalls())
func (mock *RepoMock) UpdatePremiumStatusCalls() []struct {
	Ctx context.Context
	Req model.SubscribeRequest
} {
	var calls []struct {
		Ctx context.Context
		Req model.SubscribeRequest
	}
	mock.lockUpdatePremiumStatus.RLock()
	calls = mock.calls.UpdatePremiumStatus
	mock.lockUpdatePremiumStatus.RUnlock()
	return calls
}
